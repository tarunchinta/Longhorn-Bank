# -*- coding: utf-8 -*-
"""SeedTransactions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DzoI0gWxze9b6qJCStcyxzJNFNdeCd1p
"""

import pandas as pd
# Sets the raw url variable to a google drive link
google_drive_url = "https://docs.google.com/spreadsheets/d/1E_wNkaGU22AwCGc4p-bo_YujfPT1pvNq/edit?usp=share_link&ouid=111659708370824727716&rtpof=true&sd=true"
# Changes the google drive URL to 
raw_url = 'https://drive.google.com/uc?id=' + google_drive_url.split('/')[-2]

# Declare the sheet names that you are wanting to pull data from
sheet_names = ["Customers",
               "Employees",
               "Accounts",
               "StockPortfolio",
               "Stocks",
               "Transactions",
               "StockTransactions",
               "Disputes",
              ]

data = pd.read_excel(raw_url, sheet_name = sheet_names)

data["Transactions"]

PROJECT_NAME = "fa22_finalproject_32"

def using_statements():
  """Returns the using statements and adds the opening brackets necessary for"""
  
  
  
  return f"""
using {PROJECT_NAME}.DAL;
using {PROJECT_NAME}.Models;
using {PROJECT_NAME}.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Identity;

namespace {PROJECT_NAME}.Seeding
{{
"""

# Instantiate a string to hold the customers seeding text
customers_string = ""

# Adds the using statements necessary for the C# code to work
customers_string += using_statements()

# Adds necessary C# code for adding users, based off of HW3's seeding code.
# No variables are needed so there is no need to make it an f-string
customers_string += """
    public static class SeedTransactions
    {
        public static void SeedAllTransactions(AppDbContext db)
        {
            List<Transaction> AllTransactions = new List<Transaction>();
    
"""

for transaction in data["Transactions"].to_dict(orient="records"):
  customers_string += f"""
      AllTransactions.Add(new Transaction()
      {{
                TransactionID = {int(transaction["TransactionNum"])},
                User = "{transaction["User"]}",
                TransactionType = TransactionType.{transaction["Type"]},
                ToAccount = "{transaction["ToAccount"]}",
                FromAccount = "{transaction["FromAccount"]}",
                Amount = {int(transaction["Amount"])},
                DisputeDate = new DateTime({transaction["Date"]} )                
                Approved = Approved.{transaction["Approved"]},
                TransactionComments = "{transaction["TransactionComments"]}"
       }}); 
"""

#print(customers_string)

customers_string += f"""
            //create a counter and flag to help with debugging
            int intTransactionID = 0;

            //we are now going to add the data to the database
            //this could cause errors, so we need to put this code
            //into a Try/Catch block
            try
            {{
                //loop through each of the transactions
                foreach (Transaction seedTransaction in AllTransactions)
                {{
                    //updates the counters to get info on where the problem is
                    intTransactionID = seedTransaction.TransactionID;

                    //try to find the transaction in the database
                    Transaction dbTransaction = db.Transactions.FirstOrDefault(c => c.TransactionName == seedTransaction.TransactionName);

                    //if the Transaction isn't in the database, dbTransaction will be null
                    if (dbTransaction == null)
                    {{
                        //add the Transaction to the database
                        db.Transactions.Add(seedTransaction);
                        db.SaveChanges();
                    }}
                    else //the record is in the database
                    {{
                        //update all the fields
                        //this isn't really needed for Transaction because it only has one field
                        //but you will need it to re-set seeded data with more fields
                        dbTransaction.TransactionFeatured = seedTransaction.TransactionFeatured;
                        //you would add other fields here
                        db.SaveChanges();
                    }}

                }}
            }}
            catch (Exception ex) //something about adding to the database caused a problem
            {{
                //create a new instance of the string builder to make building out 
                //our message neater - we don't want a REALLY long line of code for this
                //so we break it up into several lines
                StringBuilder msg = new StringBuilder();

                msg.Append("There was an error adding the ");
                msg.Append(" Transaction (TransactionID = ");
                msg.Append(intTransactionID);
                msg.Append(")");

                //have this method throw the exception to the calling method
                //this code wraps the exception from the database with the 
                //custom message we built above. The original error from the
                //database becomes the InnerException
                throw new Exception(msg.ToString(), ex);
            }}
  
"""



file = open("SeedTransactions.cs", "w")
file.write(customers_string)
file.close()

print(customers_string)
